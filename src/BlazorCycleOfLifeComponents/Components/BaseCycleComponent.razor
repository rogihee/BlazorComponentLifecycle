@implements IAsyncDisposable

@inject LifeCycleService LifeCycleService

@code {
    private readonly List<LifeCycleEvent> _events = new();

    public ComponentLifeCycleHistory ComponentLifeCycleHistory { get; set; }

    public int Count(LifeCycleStep step) => _events.Count(x => x.Step == step);

    public override Task SetParametersAsync(ParameterView parameters)
    {
        // this is the first method called in the life cycle, register here
        ComponentLifeCycleHistory ??= LifeCycleService.Register(this);
        ComponentLifeCycleHistory.AddEvent(LifeCycleStep.SetParametersAsync, parameters);
        return base.SetParametersAsync(parameters);
    }

    protected override Task OnInitializedAsync()
    {
        ComponentLifeCycleHistory.AddEvent(LifeCycleStep.OnInitialized);
        return Task.CompletedTask;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        ComponentLifeCycleHistory.AddEvent(LifeCycleStep.OnAfterRender, firstRender);
        return Task.CompletedTask;
    }

    protected override Task OnParametersSetAsync()
    {
        ComponentLifeCycleHistory.AddEvent(LifeCycleStep.OnParametersSet);
        return Task.CompletedTask;
    }

    protected override bool ShouldRender()
    {
        var res = base.ShouldRender();
        ComponentLifeCycleHistory.AddEvent(LifeCycleStep.ShouldRender, res);
        return res;
    }

    public virtual ValueTask DisposeAsync()
    {
        ComponentLifeCycleHistory.AddEvent(LifeCycleStep.Dispose);
        return ValueTask.CompletedTask;
    }
}